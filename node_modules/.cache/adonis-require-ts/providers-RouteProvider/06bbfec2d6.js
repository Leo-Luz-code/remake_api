"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RouteProvider {
    constructor(app) {
        this.app = app;
    }
    register() {
    }
    async boot() {
        const Route = this.app.container.use('Adonis/Core/Route');
        Route.Route.macro('mustBeSigned', function () {
            this.middleware(async (ctx, next) => {
                if (!ctx.request.hasValidSignature()) {
                    return ctx.response.badRequest('Invalid signature');
                }
                await next();
            });
            return this;
        });
        Route.RouteGroup.macro('mustBeSigned', function () {
            this.middleware(async (ctx, next) => {
                if (!ctx.request.hasValidSignature()) {
                    return ctx.response.badRequest('Invalid signature');
                }
                await next();
            });
            return this;
        });
        Route.BriskRoute.macro('goHome', function () {
            this.redirect('/');
            return this;
        });
        Route.RouteResource.macro('mustBeSigned', function () {
            this.middleware({
                '*': async (ctx, next) => {
                    if (!ctx.request.hasValidSignature()) {
                        return ctx.response.badRequest('Invalid signature');
                    }
                    await next();
                },
            });
            return this;
        });
        Route.RouteMatchers.macro('alphaString', function () {
            return {
                match: /^[a-z]+$/i,
            };
        });
    }
    async ready() {
    }
    async shutdown() {
    }
}
exports.default = RouteProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm91dGVQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJvdXRlUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFxQkEsTUFBcUIsYUFBYTtJQUNoQyxZQUFzQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtJQUFHLENBQUM7SUFFM0MsUUFBUTtJQUVmLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUVmLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBRXpELEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRTtZQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtpQkFDcEQ7Z0JBRUQsTUFBTSxJQUFJLEVBQUUsQ0FBQTtZQUNkLENBQUMsQ0FBQyxDQUFBO1lBRUYsT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQTtRQUVGLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRTtZQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtpQkFDcEQ7Z0JBRUQsTUFBTSxJQUFJLEVBQUUsQ0FBQTtZQUNkLENBQUMsQ0FBQyxDQUFBO1lBRUYsT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQTtRQUVGLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxCLE9BQU8sSUFBSSxDQUFBO1FBQ2IsQ0FBQyxDQUFDLENBQUE7UUFFRixLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDZCxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRTt3QkFDcEMsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO3FCQUNwRDtvQkFFRCxNQUFNLElBQUksRUFBRSxDQUFBO2dCQUNkLENBQUM7YUFDRixDQUFDLENBQUE7WUFFRixPQUFPLElBQUksQ0FBQTtRQUNiLENBQUMsQ0FBQyxDQUFBO1FBRUYsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQ3ZDLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLFdBQVc7YUFDbkIsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLO0lBRWxCLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUTtJQUVyQixDQUFDO0NBQ0Y7QUFyRUQsZ0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcHBsaWNhdGlvbkNvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9BcHBsaWNhdGlvbidcblxuLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBQcm92aWRlclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58XG58IFlvdXIgYXBwbGljYXRpb24gaXMgbm90IHJlYWR5IHdoZW4gdGhpcyBmaWxlIGlzIGxvYWRlZCBieSB0aGUgZnJhbWV3b3JrLlxufCBIZW5jZSwgdGhlIHRvcCBsZXZlbCBpbXBvcnRzIHJlbHlpbmcgb24gdGhlIElvQyBjb250YWluZXIgd2lsbCBub3Qgd29yay5cbnwgWW91IG11c3QgaW1wb3J0IHRoZW0gaW5zaWRlIHRoZSBsaWZlLWN5Y2xlIG1ldGhvZHMgZGVmaW5lZCBpbnNpZGVcbnwgdGhlIHByb3ZpZGVyIGNsYXNzLlxufFxufCBAZXhhbXBsZTpcbnxcbnwgcHVibGljIGFzeW5jIHJlYWR5ICgpIHtcbnwgICBjb25zdCBEYXRhYmFzZSA9IHRoaXMuYXBwLmNvbnRhaW5lci5yZXNvbHZlQmluZGluZygnQWRvbmlzL0x1Y2lkL0RhdGFiYXNlJylcbnwgICBjb25zdCBFdmVudCA9IHRoaXMuYXBwLmNvbnRhaW5lci5yZXNvbHZlQmluZGluZygnQWRvbmlzL0NvcmUvRXZlbnQnKVxufCAgIEV2ZW50Lm9uKCdkYjpxdWVyeScsIERhdGFiYXNlLnByZXR0eVByaW50KVxufCB9XG58XG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVQcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBhcHA6IEFwcGxpY2F0aW9uQ29udHJhY3QpIHt9XG5cbiAgcHVibGljIHJlZ2lzdGVyKCkge1xuICAgIC8vIFJlZ2lzdGVyIHlvdXIgb3duIGJpbmRpbmdzXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYm9vdCgpIHtcbiAgICAvLyBBbGwgYmluZGluZ3MgYXJlIHJlYWR5LCBmZWVsIGZyZWUgdG8gdXNlIHRoZW1cbiAgICBjb25zdCBSb3V0ZSA9IHRoaXMuYXBwLmNvbnRhaW5lci51c2UoJ0Fkb25pcy9Db3JlL1JvdXRlJylcblxuICAgIFJvdXRlLlJvdXRlLm1hY3JvKCdtdXN0QmVTaWduZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBpZiAoIWN0eC5yZXF1ZXN0Lmhhc1ZhbGlkU2lnbmF0dXJlKCkpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LnJlc3BvbnNlLmJhZFJlcXVlc3QoJ0ludmFsaWQgc2lnbmF0dXJlJylcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG5leHQoKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9KVxuXG4gICAgUm91dGUuUm91dGVHcm91cC5tYWNybygnbXVzdEJlU2lnbmVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5taWRkbGV3YXJlKGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgaWYgKCFjdHgucmVxdWVzdC5oYXNWYWxpZFNpZ25hdHVyZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5yZXNwb25zZS5iYWRSZXF1ZXN0KCdJbnZhbGlkIHNpZ25hdHVyZScpXG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBuZXh0KClcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSlcblxuICAgIFJvdXRlLkJyaXNrUm91dGUubWFjcm8oJ2dvSG9tZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucmVkaXJlY3QoJy8nKVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0pXG5cbiAgICBSb3V0ZS5Sb3V0ZVJlc291cmNlLm1hY3JvKCdtdXN0QmVTaWduZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoe1xuICAgICAgICAnKic6IGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICBpZiAoIWN0eC5yZXF1ZXN0Lmhhc1ZhbGlkU2lnbmF0dXJlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjdHgucmVzcG9uc2UuYmFkUmVxdWVzdCgnSW52YWxpZCBzaWduYXR1cmUnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF3YWl0IG5leHQoKVxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9KVxuXG4gICAgUm91dGUuUm91dGVNYXRjaGVycy5tYWNybygnYWxwaGFTdHJpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaDogL15bYS16XSskL2ksXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkeSgpIHtcbiAgICAvLyBBcHAgaXMgcmVhZHlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaHV0ZG93bigpIHtcbiAgICAvLyBDbGVhbnVwLCBzaW5jZSBhcHAgaXMgZ29pbmcgZG93blxuICB9XG59XG4iXX0=